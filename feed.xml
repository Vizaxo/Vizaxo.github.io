<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="https://vizaxo.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://vizaxo.github.io/" rel="alternate" type="text/html" /><updated>2017-08-29T14:10:59+01:00</updated><id>https://vizaxo.github.io/</id><title type="html">Vizaxo</title><subtitle>My blog
</subtitle><entry><title type="html">GSoC 2017 Wrap-up</title><link href="https://vizaxo.github.io/2017/08/26/gsoc-2017-final-post.html" rel="alternate" type="text/html" title="GSoC 2017 Wrap-up" /><published>2017-08-26T00:00:00+01:00</published><updated>2017-08-26T00:00:00+01:00</updated><id>https://vizaxo.github.io/2017/08/26/gsoc-2017-final-post</id><content type="html" xml:base="https://vizaxo.github.io/2017/08/26/gsoc-2017-final-post.html">&lt;p&gt;I&amp;#8217;ve spent the last ~3 months working on my &lt;a href=&quot;https://developers.google.com/open-source/gsoc/&quot;&gt;GSoC&lt;/a&gt; project for &lt;a href=&quot;http://terasology.org/&quot;&gt;Terasology&lt;/a&gt;. I&amp;#8217;ve recorded my progress on the project in several places: the code (along with some discussion) is presented in GitHub PRs that are linked throughout the rest of this article; there&amp;#8217;s an introduction to my project in a previous blog post; and I documented my progress over the summer in a series of forum posts.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/2017/06/28/google-summer-of-code-introduction.html&quot;&gt;Introductory blog post&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://forum.terasology.org/threads/new-conceptual-layer-sector-plus-musings-on-multi-world-node.1420/#post-15124&quot;&gt;Progress forum posts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Project work&lt;/h2&gt;
&lt;h3&gt;Pools&lt;/h3&gt;
&lt;p&gt;The first part of this project was implementing pools. These are an extension of the game&amp;#8217;s entity-component system which allow entities to be stored in multiple locations, in preparation for splitting the game into multiple worlds, or splitting servers across multiple machines.&lt;/p&gt;
&lt;p&gt;They also lay the groundwork for the next part of the project, sectors, by allowing sector-scope entities to be stored in their own pool.&lt;/p&gt;
&lt;p&gt;The terminology between sectors/pools can get confusing, because the main reason for implementing pools is to allow multiple sector pools, so they are often discussed together under the name &amp;#8216;sectors&amp;#8217;.&lt;/p&gt;
&lt;h4&gt;PRs:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/MovingBlocks/Terasology/pull/2975&quot;&gt;Initial pools PR&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Vizaxo/Terasology/pull/1&quot;&gt;Rename cache to pool&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Vizaxo/Terasology/pull/2&quot;&gt;Bug fixes and cleanup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Vizaxo/Terasology/pull/3&quot;&gt;More fixes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Vizaxo/Terasology/pull/4&quot;&gt;More fixes 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Discussion issue:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/MovingBlocks/Terasology/issues/2976&quot;&gt;Sectors and pools implementation/API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Sector simulation&lt;/h3&gt;
&lt;p&gt;The second part of this project was sector-scope simulation, allowing entities to undergo simulation that is based on the time between simulation events rather than the number of events that are sent. This allows the simulation rate to be decreased, especially when the chunks that the entity affects aren&amp;#8217;t loaded, to improve performance scaling with lots of entities.&lt;/p&gt;
&lt;h4&gt;prs:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Vizaxo/Terasology/pull/5&quot;&gt;Sector simulation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/MovingBlocks/Terasology/pull/3009&quot;&gt;PR that merged pools work, and the first sector simulation PR&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/MovingBlocks/Terasology/pull/3022&quot;&gt;Add SectorRegionComponent to allow sector entities to span multiple chunks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/MovingBlocks/Terasology/pull/3037&quot;&gt;Convert alwaysRelevant to entity scope&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/MovingBlocks/Terasology/pull/3041&quot;&gt;Allow sector entities to simulate at a different rate when loaded&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Zones&lt;/h3&gt;
&lt;p&gt;The final part of the project was zones (initially called surfaces). Zones allow the world to be split into different areas for world generation, and allow those different areas to have their own section on the world preview.&lt;/p&gt;
&lt;p&gt;The most useful type of zone at the moment is the layered zone (or just layer). Layers are a special type of zone that lie horizontally in the world, and don&amp;#8217;t overlap with each other. They are used to split up each of the layers in the world into separate areas, which allows each one to be provided by its own module (increasing the modularity and customisation of the game), and will open up further options in the future (such as splitting the sectors in the world according to the layers that exist).&lt;/p&gt;
&lt;p&gt;Zones also provide a way of improving the world preview system, which allows the player to see what a world will look like before loading the world. Previously there was only one preview screen for the whole world, so you couldn&amp;#8217;t show multiple separate parts of the world. Each zone has the option to act as a preview screen, so each part of the world (e.g. a layer of deep lava lakes, a cave layer, the surface of the world, and some floating islands) can have its own display screen.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Terasology/TutorialWorldGeneration/wiki/Zones&quot;&gt;More information and tutorials on the zones wiki page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;PRs:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/MovingBlocks/Terasology/pull/3054&quot;&gt;Zones&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/MovingBlocks/Terasology/pull/3079&quot;&gt;Zones 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Module updates&lt;/h3&gt;
&lt;p&gt;To showcase the changes listed above, I updated some of the existing Terasology modules to use these new features.&lt;/p&gt;
&lt;h4&gt;Dynamic Cities&lt;/h4&gt;
&lt;p&gt;The first module I updated was &lt;a href=&quot;https://github.com/terasology/dynamiccities&quot;&gt;Dynamic Cities&lt;/a&gt;, which was created for last year&amp;#8217;s GSoC. I updated the cities to use sector simulation, so the cities grow at a predictable rate even in games with different framerates, and to allow the simulation to be performed at a lower rate when the city is unloaded. This means that when no players are near the city, fewer updates need to be done, while still having the city grow at a consistent rate.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Terasology/DynamicCities/pull/30&quot;&gt;Update Dynamic Cities to use sector-scope simulation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Inferno&lt;/h4&gt;
&lt;p&gt;I also updated &lt;a href=&quot;https://github.com/terasology/inferno&quot;&gt;Inferno&lt;/a&gt;&amp;#8217;s world generation to be a layered zone, and turned it into a world plugin. This means that it can be added as a layer to any world, instead of needing its own custom world generator.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Terasology/Inferno/pull/4&quot;&gt;Convert Inferno into a layer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;TutorialWorldGeneration&lt;/h4&gt;
&lt;p&gt;The final module update was adding an example generator to &lt;a href=&quot;https://github.com/Terasology/TutorialWorldGeneration&quot;&gt;TutorialWorldGeneration&lt;/a&gt; which was based on layers and zones. This shows how the features can be used in a complete world generator, and how they can interact with each other, and with the normal world generation features.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Terasology/TutorialWorldGeneration/pull/5&quot;&gt;Add example layer/zone generator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Comparison to original proposal&lt;/h2&gt;
&lt;p&gt;My original proposal focused only on pools and sectors, and included more advanced features such as allowing sectors to dynamically split or merge depending on which entities were interacting with each other. However, it was decided that these features wouldn&amp;#8217;t provide many advantages until multi-world games or multi-machine servers were being worked on, so they were not implemented as part of this project. Instead of these I added zones, which will have a more immediate impact than the features that were pushed back to a later time.&lt;/p&gt;
&lt;h2&gt;Future work&lt;/h2&gt;
&lt;p&gt;The features I have implemented during this project are already fit for use, and have been merged into the v2.0.0 staging branch ready for inclusion in the next major version of the game.&lt;/p&gt;
&lt;p&gt;However, there are still changes and improvements that can be made to the work I&amp;#8217;ve done, and long-term projects that can build off this work:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Improve the ordering of layers, to allow blank space between them and to be able to specify a desired depth for the layer&lt;/li&gt;
  &lt;li&gt;Fix bug where &amp;#8220;Entity x doesn&amp;#8217;t have an assigned pool&amp;#8221; appears repeatedly when the game is saved&lt;/li&gt;
  &lt;li&gt;Fix bug with Dynamic Cities not properly reloading after being saved&lt;/li&gt;
  &lt;li&gt;Implement multiple sectors, and sector splitting/merging&lt;/li&gt;
  &lt;li&gt;Add non-overlapping, tiling, columnar zones (to allow each &lt;a href=&quot;https://en.wikipedia.org/wiki/Natural_region&quot;&gt;natural region&lt;/a&gt; to be its own zone)&lt;/li&gt;
  &lt;li&gt;Convert existing world generators to use layers and zones&lt;/li&gt;
  &lt;li&gt;Add connectors between zones so they can interact or merge at the edges&lt;/li&gt;
  &lt;li&gt;Allow zone world plugins to be nested zones (so that zones can be added to a specific layer in the world)&lt;/li&gt;
  &lt;li&gt;Allow each game save to consist of multiple worlds&lt;/li&gt;
  &lt;li&gt;Allow game servers to be split across multiple physical machines&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;Overall, the project has been absolutely fantastic; I&amp;#8217;ve learned a huge amount about contributing to an open source project with a large existing codebase, and about programming in general. I had a lot of fun doing the project, and I hope that my contributions are valuable and help developers and players of the game in the future.&lt;/p&gt;
&lt;p&gt;I want to say a huge thank you to my mentors: they have been extremely helpful, both guiding the project and helping me learn a huge amount of new skills along the way. I also want to thank Google for running the program, which allowed me to spend my summer working on a great open source project while learning far more than I could by coding alone.&lt;/p&gt;</content><author><name></name></author><summary type="html">I&amp;#8217;ve spent the last ~3 months working on my GSoC project for Terasology. I&amp;#8217;ve recorded my progress on the project in several places: the code (along with some discussion) is presented in GitHub PRs that are linked throughout the rest of this article; there&amp;#8217;s an introduction to my project in a previous blog post; and I documented my progress over the summer in a series of forum posts.</summary></entry><entry><title type="html">Google Summer of Code Introduction</title><link href="https://vizaxo.github.io/2017/06/28/google-summer-of-code-introduction.html" rel="alternate" type="text/html" title="Google Summer of Code Introduction" /><published>2017-06-28T00:00:00+01:00</published><updated>2017-06-28T00:00:00+01:00</updated><id>https://vizaxo.github.io/2017/06/28/google-summer-of-code-introduction</id><content type="html" xml:base="https://vizaxo.github.io/2017/06/28/google-summer-of-code-introduction.html">&lt;h2&gt;Hello world!&lt;/h2&gt;
&lt;p&gt;Welcome to my blog! I guess this is a kind-of introductory post, introducing the subject I will be writing about over the next couple of months. I&amp;#8217;ve been meaning to set up a blog for a while now, but I was selected for the &lt;a href=&quot;https://summerofcode.withgoogle.com/&quot;&gt;Google Summer of Code (GSoC)&lt;/a&gt; program this summer (to work on a game called &lt;a href=&quot;http://terasology.org/&quot;&gt;Terasology&lt;/a&gt;), which is a good incentive to start writing.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll be posting updates about my project over the summer, and will hopefully be including tips and notes about my workflow, problems I encounter, and talking about how I overcome challenges.&lt;/p&gt;
&lt;h2&gt;What is GSoC?&lt;/h2&gt;
&lt;p&gt;The Google Summer of Code (GSoC), is a program run by Google to help university students work closely with an open-source organisation, spending a summer writing code for them. It&amp;#8217;s probably easier to explain by linking to the &lt;a href=&quot;https://summerofcode.withgoogle.com/&quot;&gt;website&lt;/a&gt; and the &lt;a href=&quot;https://en.wikipedia.org/wiki/Google_Summer_of_Code&quot;&gt;Wikipedia page&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;What is Terasology?&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;m working on a game called Terasology, which is an open-source game similar to Minecraft. The website is &lt;a href=&quot;http://terasology.org/&quot;&gt;here&lt;/a&gt;, and the GitHub repository is &lt;a href=&quot;https://github.com/MovingBlocks/Terasology&quot;&gt;here&lt;/a&gt;. It&amp;#8217;s exactly what I want a voxel sandbox game to be: open source, and focused on modding.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve spent a lot of time playing Minecraft, most of which was with mods and modpacks like &lt;a href=&quot;https://www.technicpack.net/modpack/tekkitmain.552547&quot;&gt;Tekkit&lt;/a&gt; (providing machinery, magic, and automation to Minecraft), so I want modding to be a first-class citizen. Minecraft mods relied on decompiling the main game, and they broke with every update, when internal code changed. They were a pain to install and you couldn&amp;#8217;t easily turn them off, so I ended up with lots of copies of the game for different combinations of mods.&lt;/p&gt;
&lt;p&gt;Terasology is taking a different approach: the engine is just the core features, and all of the content is added in modules, which have a stable and well-defined API. This means you could use the Terasology engine, but write all of the blocks, animals, items, world generation, progression, etc. that you want, and include them as modules. These modules can be enabled/disabled at will, and combined with any other modules that are available, to make a completely customizable experience.&lt;/p&gt;
&lt;h2&gt;What is my project?&lt;/h2&gt;
&lt;p&gt;[Note: the architecture, implementation and uses of this are not set in stone, and will likely change as they are used and tested]&lt;/p&gt;
&lt;p&gt;The first part of the project I&amp;#8217;ve been working on is a set of features called sectors and caches (but those names may yet change), but to explain them I&amp;#8217;ll have to go into a bit of detail behind Terasology&amp;#8217;s inner workings. Change is effected in Terasology by the entity system, which consists of entities that have components attached to them. Systems that are associated with those components can receive and send events, which can cause effects that the player can see.&lt;/p&gt;
&lt;h3&gt;Caches&lt;/h3&gt;
&lt;p&gt;rrently, all of the entities and components are stored in one big cache, and systems run on one thread, acting on the same cache. That&amp;#8217;s fine for small worlds, but when there are lots of entities or computationally-heavy systems, the performance can suffer. Many entities will be tied to specific locations in a world, so one option is to unload them when the chunks they are in aren&amp;#8217;t loaded. But that means that the world outside of the direct vicinity of the player remains static and unchanging, which diminishes the gameplay experience.&lt;/p&gt;
&lt;p&gt;ches allow the entity store to be split up into smaller groups, which can be interacted with separately. In the future, they can provide options for running the game across multiple threads, or even across multiple computers, by assigning threads to certain caches to split up the load.&lt;/p&gt;
&lt;p&gt;r example, a detailed climate simulation might be computationally expensive, but would not need to interact with the rest of the world very often (only when visible events occur, such as rain/snow/sun, storms, or rivers overflowing). This would be a good candidate to run in a separate cache on its own thread, so it doesn&amp;#8217;t slow down the main game.&lt;/p&gt;
&lt;h3&gt;Sectors&lt;/h3&gt;
&lt;p&gt;sector is just a cache which holds sector-scope entities. Sector-scope entities can stay loaded while the chunk they&amp;#8217;re associated with is unloaded, allowing for processing to continue when the player is away. They can be aware of the state of the chunk and other nearby entities, so when they are in an unloaded chunk, they might be able to do computation at a less granular level, saving computation time.&lt;/p&gt;
&lt;p&gt;r example, the &lt;a href=&quot;https://github.com/terasology/dynamiccities&quot;&gt;Dynamic Cities&lt;/a&gt; module provides cities, which produce goods. When the chunks of the city are loaded, the goods could be calculated at a fine level of detail, managing which workshops/workers produce which items, and placing them accordingly (so if the player comes in and breaks something in a workshop, its production would decrease). But when the chunks are not loaded, the sector-scope entity can take control, continuing to calculate production at an average rate, and spreading the goods between the workshops when the player returns to the city.&lt;/p&gt;
&lt;h3&gt;The rest of the project&lt;/h3&gt;
&lt;p&gt;Sectors/caches are just the first part of my GSoC project. After working on them, I&amp;#8217;ll move onto other world-generation-related topics. but this blog post is getting rather long, so that discussion will have to wait for another day.&lt;/p&gt;
&lt;h2&gt;Technical blog notes&lt;/h2&gt;
&lt;p&gt;The blog is built with &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; and hosted on &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;, and they&amp;#8217;ve been pretty easy to setup and use so far. I still have some problems, but I haven&amp;#8217;t had to faff about with PHP, DNS, external servers, or anything like that. They&amp;#8217;re also free (as in beer), and Jekyll is free (as in speech; A.K.A. open-source or libre), which is a big plus.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m writing this post with &lt;a href=&quot;http://Orgmode.org/&quot;&gt;Org mode&lt;/a&gt; in &lt;a href=&quot;https://www.gnu.org/software/emacs/&quot;&gt;Emacs&lt;/a&gt;, which has been one less thing to learn, as I already use Org for lots of my notes and planning. I&amp;#8217;m sure I&amp;#8217;ll be writing more about Emacs and Org on this blog in the future. I had to install a custom Jekyll plugin (&lt;a href=&quot;https://gist.github.com/abhiyerra/7377603&quot;&gt;org_converter.rb&lt;/a&gt;) to be able to use Org files instead of markdown, but this setup works much better for me (though it does mean that I can&amp;#8217;t use GitHub&amp;#8217;s native Jekyll hosting, so I&amp;#8217;m going to have to host the source code and the generated site separately; I&amp;#8217;ll have to work out the best way to do that).&lt;/p&gt;</content><author><name></name></author><summary type="html">Hello world!</summary></entry></feed>