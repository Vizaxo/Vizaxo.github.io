<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-06-28T14:38:48+01:00</updated><id>http://localhost:4000/</id><title type="html">Vizaxo</title><subtitle>My blog
</subtitle><entry><title type="html">Google Summer of Code Introduction</title><link href="http://localhost:4000/2017/06/28/google-summer-of-code-introduction.html" rel="alternate" type="text/html" title="Google Summer of Code Introduction" /><published>2017-06-28T00:00:00+01:00</published><updated>2017-06-28T00:00:00+01:00</updated><id>http://localhost:4000/2017/06/28/google-summer-of-code-introduction</id><content type="html" xml:base="http://localhost:4000/2017/06/28/google-summer-of-code-introduction.html">&lt;h1&gt;Hello world!&lt;/h1&gt;
&lt;p&gt;Welcome to my blog! I guess this is a kind-of introductory post, introducing the subject I will be writing about over the next couple of months. I&amp;#8217;ve been meaning to set up a blog for a while now, but I was selected for the &lt;a href=&quot;https://summerofcode.withgoogle.com/&quot;&gt;Google Summer of Code (GSoC)&lt;/a&gt; program this summer (to work on a game called &lt;a href=&quot;http://terasology.org/&quot;&gt;Terasology&lt;/a&gt;), which is a good incentive to start writing.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll be posting updates about my project over the summer, and will hopefully be including tips and notes about my workflow, problems I encounter, and talking about how I overcome challenges.&lt;/p&gt;
&lt;h1&gt;What is GSoC?&lt;/h1&gt;
&lt;p&gt;The Google Summer of Code (GSoC), is a program run by Google to help university students work closely with an open-source organisation, spending a summer writing code for them. It&amp;#8217;s probably easier to explain by linking to the &lt;a href=&quot;https://summerofcode.withgoogle.com/&quot;&gt;website&lt;/a&gt; and the &lt;a href=&quot;https://en.wikipedia.org/wiki/Google_Summer_of_Code&quot;&gt;Wikipedia page&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;What is Terasology?&lt;/h1&gt;
&lt;p&gt;I&amp;#8217;m working on a game called Terasology, which is an open-source game similar to Minecraft. The website is &lt;a href=&quot;http://terasology.org/&quot;&gt;here&lt;/a&gt;, and the GitHub repository is &lt;a href=&quot;https://github.com/MovingBlocks/Terasology&quot;&gt;here&lt;/a&gt;. It&amp;#8217;s exactly what I want a voxel sandbox game to be: open source, and focused on modding.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve spent a lot of time playing Minecraft, most of which was with mods and modpacks like &lt;a href=&quot;https://www.technicpack.net/modpack/tekkitmain.552547&quot;&gt;Tekkit&lt;/a&gt; (providing machinery, magic, and automation to Minecraft), so I want modding to be a first-class citizen. Minecraft mods relied on decompiling the main game, and they broke with every update, when internal code changed. They were a pain to install and you couldn&amp;#8217;t easily turn them off, so I ended up with lots of copies of the game for different combinations of mods.&lt;/p&gt;
&lt;p&gt;Terasology is taking a different approach: the engine is just the core features, and all of the content is added in modules, which have a stable and well-defined API. This means you could use the Terasology engine, but write all of the blocks, animals, items, world generation, progression, etc. that you want, and include them as modules. These modules can be enabled/disabled at will, and combined with any other modules that are available, to make a completely customizable experience.&lt;/p&gt;
&lt;h1&gt;What is my project?&lt;/h1&gt;
&lt;p&gt;[Note: the architecture, implementation and uses of this are not set in stone, and will likely change as they are used and tested]&lt;/p&gt;
&lt;p&gt;The first part of the project I&amp;#8217;ve been working on is a set of features called sectors and caches (but those names may yet change), but to explain them I&amp;#8217;ll have to go into a bit of detail behind Terasology&amp;#8217;s inner workings. Change is effected in Terasology by the entity system, which consists of entities that have components attached to them. Systems that are associated with those components can receive and send events, which can cause effects that the player can see.&lt;/p&gt;
&lt;h4&gt;Caches&lt;/h4&gt;
&lt;p&gt;Currently, all of the entities and components are stored in one big cache, and systems run on one thread, acting on the same cache. That&amp;#8217;s fine for small worlds, but when there are lots of entities or computationally-heavy systems, the performance can suffer. Many entities will be tied to specific locations in a world, so one option is to unload them when the chunks they are in aren&amp;#8217;t loaded. But that means that the world outside of the direct vicinity of the player remains static and unchanging, which diminishes the gameplay experience.&lt;/p&gt;
&lt;p&gt;Caches allow the entity store to be split up into smaller groups, which can be interacted with separately. In the future, they can provide options for running the game across multiple threads, or even across multiple computers, by assigning threads to certain caches to split up the load.&lt;/p&gt;
&lt;p&gt;For example, a detailed climate simulation might be computationally expensive, but would not need to interact with the rest of the world very often (only when visible events occur, such as rain/snow/sun, storms, or rivers overflowing). This would be a good candidate to run in a separate cache on its own thread, so it doesn&amp;#8217;t slow down the main game.&lt;/p&gt;
&lt;h4&gt;Sectors&lt;/h4&gt;
&lt;p&gt;A sector is just a cache which holds sector-scope entities. Sector-scope entities can stay loaded while the chunk they&amp;#8217;re associated with is unloaded, allowing for processing to continue when the player is away. They can be aware of the state of the chunk and other nearby entities, so when they are in an unloaded chunk, they might be able to do computation at a less granular level, saving computation time.&lt;/p&gt;
&lt;p&gt;For example, the &lt;a href=&quot;https://github.com/terasology/dynamiccities&quot;&gt;Dynamic Cities&lt;/a&gt; module provides cities, which produce goods. When the chunks of the city are loaded, the goods could be calculated at a fine level of detail, managing which workshops/workers produce which items, and placing them accordingly (so if the player comes in and breaks something in a workshop, its production would decrease). But when the chunks are not loaded, the sector-scope entity can take control, continuing to calculate production at an average rate, and spreading the goods between the workshops when the player returns to the city.&lt;/p&gt;
&lt;h4&gt;The rest of the project&lt;/h4&gt;
&lt;p&gt;Sectors/caches are just the first part of my GSoC project. After working on them, I&amp;#8217;ll move onto other world-generation-related topics. but this blog post is getting rather long, so that discussion will have to wait for another day.&lt;/p&gt;
&lt;h1&gt;Technical blog notes&lt;/h1&gt;
&lt;p&gt;The blog is built with &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; and hosted on &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;, and they&amp;#8217;ve been pretty easy to setup and use so far. I still have some problems, but I haven&amp;#8217;t had to faff about with PHP, DNS, external servers, or anything like that. They&amp;#8217;re also free (as in beer), and Jekyll is free (as in speech; A.K.A. open-source or libre), which is a big plus.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m writing this post with &lt;a href=&quot;http://Orgmode.org/&quot;&gt;Org mode&lt;/a&gt; in &lt;a href=&quot;https://www.gnu.org/software/emacs/&quot;&gt;Emacs&lt;/a&gt;, which has been one less thing to learn, as I already use Org for lots of my notes and planning. I&amp;#8217;m sure I&amp;#8217;ll be writing more about Emacs and Org on this blog in the future. I had to install a custom Jekyll plugin (&lt;a href=&quot;https://gist.github.com/abhiyerra/7377603&quot;&gt;org_converter.rb&lt;/a&gt;) to be able to use Org files instead of markdown, but this setup works much better for me (though it does mean that I can&amp;#8217;t use GitHub&amp;#8217;s native Jekyll hosting, so I&amp;#8217;m going to have to host the source code and the generated site separately; I&amp;#8217;ll have to work out the best way to do that).&lt;/p&gt;</content><author><name></name></author><summary type="html">Hello world!</summary></entry></feed>